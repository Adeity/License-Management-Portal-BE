//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Security.Authentication.ExtendedProtection;
using System.ServiceModel;

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationStatus", Namespace="http://schemas.datacontract.org/2004/07/model")]
    public enum ActivationStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enable = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disable = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminate = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusChangeResult", Namespace="http://schemas.datacontract.org/2004/07/model")]
    public partial class StatusChangeResult : object
    {
        
        private string[] ErrorMessageField;
        
        private bool IsStatusChangedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStatusChanged
        {
            get
            {
                return this.IsStatusChangedField;
            }
            set
            {
                this.IsStatusChangedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenewRequest", Namespace="http://schemas.datacontract.org/2004/07/model")]
    public partial class RenewRequest : object
    {
        
        private System.DateTime ExpirationDateField;
        
        private string SerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate
        {
            get
            {
                return this.ExpirationDateField;
            }
            set
            {
                this.ExpirationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber
        {
            get
            {
                return this.SerialNumberField;
            }
            set
            {
                this.SerialNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenewResult", Namespace="http://schemas.datacontract.org/2004/07/model")]
    public partial class RenewResult : object
    {
        
        private string[] ErrorMessageField;
        
        private System.DateTime ExpirationDateField;
        
        private bool IsRenewedField;
        
        private string SerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate
        {
            get
            {
                return this.ExpirationDateField;
            }
            set
            {
                this.ExpirationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRenewed
        {
            get
            {
                return this.IsRenewedField;
            }
            set
            {
                this.IsRenewedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber
        {
            get
            {
                return this.SerialNumberField;
            }
            set
            {
                this.SerialNumberField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IResellerService")]
    public interface IResellerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResellerService/GetSerialNumbers", ReplyAction="http://tempuri.org/IResellerService/GetSerialNumbersResponse")]
        System.Threading.Tasks.Task<string[]> GetSerialNumbersAsync(string accountID, string productNumber, int countOfSerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResellerService/GetSerialNumbersWithExpirationDate", ReplyAction="http://tempuri.org/IResellerService/GetSerialNumbersWithExpirationDateResponse")]
        System.Threading.Tasks.Task<string[]> GetSerialNumbersWithExpirationDateAsync(string accountID, string productNumber, int requestedSerialNum, string userID, System.DateTime expirationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResellerService/IsValidSerialNumber", ReplyAction="http://tempuri.org/IResellerService/IsValidSerialNumberResponse")]
        System.Threading.Tasks.Task<string> IsValidSerialNumberAsync(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResellerService/ChangeActivationStatus", ReplyAction="http://tempuri.org/IResellerService/ChangeActivationStatusResponse")]
        System.Threading.Tasks.Task<ServiceReference1.StatusChangeResult> ChangeActivationStatusAsync(string serialNumber, ServiceReference1.ActivationStatus newStatus, string reason, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResellerService/RenewSerialNumber", ReplyAction="http://tempuri.org/IResellerService/RenewSerialNumberResponse")]
        System.Threading.Tasks.Task<ServiceReference1.RenewResult> RenewSerialNumberAsync(ServiceReference1.RenewRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IResellerServiceChannel : ServiceReference1.IResellerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ResellerServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IResellerService>, ServiceReference1.IResellerService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ResellerServiceClient() : 
                base(ResellerServiceClient.GetDefaultBinding(), ResellerServiceClient.GetDefaultEndpointAddress())
        {
            Console.WriteLine("calling default constructor");
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IResellerService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ResellerServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ResellerServiceClient.GetBindingForEndpoint(endpointConfiguration), ResellerServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            Console.WriteLine("calling endpoint config constructor");
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ResellerServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ResellerServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            Console.WriteLine("calling endpoint config and remote address constructor");
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ResellerServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ResellerServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            Console.WriteLine("calling endpoint config and remote address constructor");
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ResellerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
            Console.WriteLine("calling binding and remote address constructor");
        }
        
        public System.Threading.Tasks.Task<string[]> GetSerialNumbersAsync(string accountID, string productNumber, int countOfSerialNum)
        {
            return base.Channel.GetSerialNumbersAsync(accountID, productNumber, countOfSerialNum);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSerialNumbersWithExpirationDateAsync(string accountID, string productNumber, int requestedSerialNum, string userID, System.DateTime expirationDate)
        {
            return base.Channel.GetSerialNumbersWithExpirationDateAsync(accountID, productNumber, requestedSerialNum, userID, expirationDate);
        }
        
        public System.Threading.Tasks.Task<string> IsValidSerialNumberAsync(string serialNumber)
        {
            return base.Channel.IsValidSerialNumberAsync(serialNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.StatusChangeResult> ChangeActivationStatusAsync(string serialNumber, ServiceReference1.ActivationStatus newStatus, string reason, string userID)
        {
            return base.Channel.ChangeActivationStatusAsync(serialNumber, newStatus, reason, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.RenewResult> RenewSerialNumberAsync(ServiceReference1.RenewRequest request)
        {
            return base.Channel.RenewSerialNumberAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            Console.WriteLine("GetBindingForEndpoint endpoint config: " + endpointConfiguration);
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IResellerService))
            {
                Console.WriteLine("BasicHttpBinding_IResellerService");
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            else if ((endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityMessage_IResellerService) 
                || (endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityNone_IResellerService))
            {
                System.ServiceModel.WSHttpBinding result = null;
                if (endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityMessage_IResellerService)
                {
                    Console.WriteLine("WsHttpBinding_IResellerService");
                    result = new System.ServiceModel.WSHttpBinding(SecurityMode.Message);
                    result.Security.Message.ClientCredentialType = MessageCredentialType.Certificate;
                }
                else if (endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityNone_IResellerService)
                {
                    Console.WriteLine("WsHttpBindingSecurityNone_IResellerService");
                    result = new System.ServiceModel.WSHttpBinding(SecurityMode.None);
                }
                else if (endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityTransport_IResellerService)
                {
                    Console.WriteLine("wSHttpBindingSecurityTransport_IResellerService");
                    result = new System.ServiceModel.WSHttpBinding(SecurityMode.Transport);
                }
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            else if ((endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityTransport_IResellerService))
            {
                Console.WriteLine("WsHttpBindingSecurityTransport_IResellerService");
                System.ServiceModel.WSHttpBinding result = new System.ServiceModel.WSHttpBinding(SecurityMode.Transport);
                result.Security.Transport.ExtendedProtectionPolicy =
                    new ExtendedProtectionPolicy(PolicyEnforcement.Never);
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            else if ((endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityTransport_IResellerService))
            {
                Console.WriteLine("WsHttpBindingSecurityTransport_IResellerService");
                System.ServiceModel.WSHttpBinding result = new System.ServiceModel.WSHttpBinding(SecurityMode.Transport);
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            Console.WriteLine("endpoint config: " + endpointConfiguration);
            try
            {
                if (endpointConfiguration == EndpointConfiguration.WsHttpBindingSecurityTransport_IResellerService)
                {
                    return new System.ServiceModel.EndpointAddress("https://localhost:56317/Service.svc");
                }
                return new System.ServiceModel.EndpointAddress("http://localhost:56317/Service.svc");
            }
            catch (System.Exception e)
            {
                throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
            }
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ResellerServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IResellerService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ResellerServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IResellerService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IResellerService,
            WsHttpBindingSecurityMessage_IResellerService,
            WsHttpBindingSecurityNone_IResellerService,
            WsHttpBindingSecurityTransport_IResellerService
        }
    }
}
