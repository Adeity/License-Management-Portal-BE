// <auto-generated />
using System;
using LicenseManagementPortal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LicenseManagementPortal.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250313091218_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ActivationDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AllowNewMachine")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("DateActivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organization")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ProfileHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumberDetailsID")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("ID");

                    b.HasIndex("SerialNumberDetailsID");

                    b.ToTable("ActivationDetails", "Activation");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ActivationStatusLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("SerialNumberDetailID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("ID");

                    b.HasIndex("SerialNumberDetailID");

                    b.ToTable("ActivationStatusLogs", "Activation");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_AddressType_Name")
                        .IsUnique();

                    b.ToTable("AddressType", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_ContactType_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ContactType", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SelectOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Country_Name")
                        .IsUnique();

                    b.ToTable("Country", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InvoiceTypeId" }, "IX_Invoice_InvoiceType");

                    b.HasIndex(new[] { "OrganizationAccountId" }, "IX_Invoice_OrganizationAccount");

                    b.ToTable("Invoice", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_InvoiceType_Name")
                        .IsUnique();

                    b.ToTable("InvoiceType", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountID" }, "IX_OrganizationAccount_Account");

                    b.HasIndex(new[] { "OrganizationTypeId" }, "IX_OrganizationAccount_OrganizationType");

                    b.HasIndex(new[] { "ParentOrganizationId" }, "IX_OrganizationAccount_ParentOrganizationId");

                    b.HasIndex(new[] { "Name", "ParentOrganizationId" }, "UQ_OrganizationAccount_Name")
                        .IsUnique()
                        .HasFilter("[ParentOrganizationId] IS NOT NULL");

                    b.ToTable("OrganizationAccount", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Address2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Address3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationAccountId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationAccountId")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressTypeId" }, "IX_OrganizationAddress_AddressType");

                    b.HasIndex(new[] { "CountryId" }, "IX_OrganizationAddress_Country");

                    b.HasIndex(new[] { "OrganizationAccountId" }, "IX_OrganizationAddress_OrganizationAccount");

                    b.ToTable("OrganizationAddress", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoginUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrganizationAccountId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationRoleId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex("LoginUserId")
                        .IsUnique()
                        .HasFilter("[LoginUserId] IS NOT NULL");

                    b.HasIndex("OrganizationRoleId");

                    b.HasIndex(new[] { "ContactTypeId" }, "IX_OrganizationContact_ContactType");

                    b.HasIndex(new[] { "OrganizationAccountId" }, "IX_OrganizationContact_OrganizationAccount");

                    b.ToTable("OrganizationContact", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationPackageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PackageDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumbersCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationAccountId");

                    b.HasIndex("PackageDetailsId");

                    b.ToTable("OrganizationPackageDetails", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_OrganizationRole_Name")
                        .IsUnique();

                    b.ToTable("OrganizationRole", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id")
                        .HasName("PK_OrganizationStatus");

                    b.ToTable("OrganizationType", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.PackageDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool?>("Advanced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Current")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Engineering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("Hybrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Legacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("LegacyPlus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<int>("Subscription")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("ID");

                    b.ToTable("PackageDetails", "Activation");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SerialNumberDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsTemp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LatestModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResellerAccount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResellerCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResellerInvoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResellerInvoiceLastRenew")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerialNumberRequestLogID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("ID");

                    b.HasIndex("SerialNumberRequestLogID");

                    b.ToTable("SerialNumberDetails", "Activation");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SerialNumberRequestLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("OrderdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestedSN")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("ID");

                    b.ToTable("SerialNumberRequestLog", "Activation");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SubscriptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EMailSentCount")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumberDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SerialNumberDetailsId");

                    b.ToTable("SubscriptionItem", "Reseller");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.database.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ActivationDetail", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.SerialNumberDetail", "SerialNumberDetails")
                        .WithMany("ActivationDetails")
                        .HasForeignKey("SerialNumberDetailsID")
                        .IsRequired()
                        .HasConstraintName("FK_ActivationDetails_SerialNumberDetails");

                    b.Navigation("SerialNumberDetails");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ActivationStatusLog", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.SerialNumberDetail", "SerialNumberDetail")
                        .WithMany("ActivationStatusLogs")
                        .HasForeignKey("SerialNumberDetailID")
                        .IsRequired()
                        .HasConstraintName("FK_ActivationStatusLogs_SerialNumberDetails");

                    b.Navigation("SerialNumberDetail");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.Invoice", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_InvoiceType");

                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationAccount", "OrganizationAccount")
                        .WithMany("Invoices")
                        .HasForeignKey("OrganizationAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_OrganizationAccount");

                    b.Navigation("InvoiceType");

                    b.Navigation("OrganizationAccount");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationAccount", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationType", "OrganizationType")
                        .WithMany("OrganizationAccounts")
                        .HasForeignKey("OrganizationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAccount_OrganizationType");

                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationAccount", "ParentOrganization")
                        .WithMany("InverseParentOrganization")
                        .HasForeignKey("ParentOrganizationId")
                        .HasConstraintName("FK_OrganizationAccount_OrganizationAccount");

                    b.Navigation("OrganizationType");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationAddress", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.AddressType", "AddressType")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAddress_AddressType");

                    b.HasOne("LicenseManagementPortal.Model.Entities.Country", "Country")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAddress_Country");

                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationAccount", "OrganizationAccount")
                        .WithOne("OrganizationAddress")
                        .HasForeignKey("LicenseManagementPortal.Model.Entities.OrganizationAddress", "OrganizationAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationAccount_OrganizationAddress");

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("OrganizationAccount");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationContact", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.ContactType", "ContactType")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("ContactTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationContact_ContactType");

                    b.HasOne("LicenseManagementPortal.Model.database.User", "LoginUser")
                        .WithOne("OrganizationContact")
                        .HasForeignKey("LicenseManagementPortal.Model.Entities.OrganizationContact", "LoginUserId")
                        .HasConstraintName("FK_OrganizationContact_LoginUser");

                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationAccount", "OrganizationAccount")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("OrganizationAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationContact_OrganizationAccount");

                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("OrganizationRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationContact_OrganizationRole");

                    b.Navigation("ContactType");

                    b.Navigation("LoginUser");

                    b.Navigation("OrganizationAccount");

                    b.Navigation("OrganizationRole");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationPackageDetail", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.OrganizationAccount", "OrganizationAccount")
                        .WithMany("OrganizationPackageDetails")
                        .HasForeignKey("OrganizationAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationPackageDetails_OrganizationAccount");

                    b.HasOne("LicenseManagementPortal.Model.Entities.PackageDetail", "PackageDetails")
                        .WithMany("OrganizationPackageDetails")
                        .HasForeignKey("PackageDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationPackageDetails_PackageDetails");

                    b.Navigation("OrganizationAccount");

                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SerialNumberDetail", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.SerialNumberRequestLog", "SerialNumberRequestLog")
                        .WithMany("SerialNumberDetails")
                        .HasForeignKey("SerialNumberRequestLogID")
                        .IsRequired()
                        .HasConstraintName("FK_SerialNumberDetails_SerialNumberRequestLogID");

                    b.Navigation("SerialNumberRequestLog");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SubscriptionItem", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.Entities.Invoice", "Invoice")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubscriptionItem_Invoice");

                    b.HasOne("LicenseManagementPortal.Model.Entities.SerialNumberDetail", "SerialNumberDetails")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("SerialNumberDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubscriptionItem_SerialNumberDetails");

                    b.Navigation("Invoice");

                    b.Navigation("SerialNumberDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LicenseManagementPortal.Model.database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LicenseManagementPortal.Model.database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.AddressType", b =>
                {
                    b.Navigation("OrganizationAddresses");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.ContactType", b =>
                {
                    b.Navigation("OrganizationContacts");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.Country", b =>
                {
                    b.Navigation("OrganizationAddresses");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.Invoice", b =>
                {
                    b.Navigation("SubscriptionItems");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.InvoiceType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationAccount", b =>
                {
                    b.Navigation("InverseParentOrganization");

                    b.Navigation("Invoices");

                    b.Navigation("OrganizationAddress");

                    b.Navigation("OrganizationContacts");

                    b.Navigation("OrganizationPackageDetails");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationRole", b =>
                {
                    b.Navigation("OrganizationContacts");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.OrganizationType", b =>
                {
                    b.Navigation("OrganizationAccounts");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.PackageDetail", b =>
                {
                    b.Navigation("OrganizationPackageDetails");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SerialNumberDetail", b =>
                {
                    b.Navigation("ActivationDetails");

                    b.Navigation("ActivationStatusLogs");

                    b.Navigation("SubscriptionItems");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.Entities.SerialNumberRequestLog", b =>
                {
                    b.Navigation("SerialNumberDetails");
                });

            modelBuilder.Entity("LicenseManagementPortal.Model.database.User", b =>
                {
                    b.Navigation("OrganizationContact")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
